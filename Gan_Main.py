import Config
from NeuroUtils import Core


#1
#Creating Class of the project, putting parameters from Config file
Gan = Core.Project.Gan_Project(Config)

#2
#Initializating data from main database folder to project folder. 
#Parameters of this data like resolution and crop ratio are set in Config
Gan.Initialize_data()

#3
#Loading and merging data to class
Gan.Load_and_merge_data()

#4
#Processing data by splitting it to train,val and test set and data augmentation.
#Parameters of augmentation and reduction are set in the Config file
Gan.Process_data()

#5
#Initialization of model architecture from library. 
#Model architecture is specified in the config
#This step can be skipper and you can provide your own compiled model
Gan.Initialize_model_from_library()

#6
#Training of the model. It can load previously saved data from project folder
#or train from scratch. Parameters of training are set in Config file
Gan.Initialize_weights_and_training_gan()


#7
#Showing results of the training 
#!!! (sliders must be present as objects as they not worked called from function, this issue is present in Spyder IDE, if you run script in other env you can choose to not store sliders)

#History of model training showed by images, from noise to (hopefully) images
#similar to real samples 
history_images , slider = Gan.Initialize_history(plot_size = 2)

#Generated images from actual model
generated_images = Gan.Initialize_results(plot_size = 4)

#Smooth transition from one to another image generated by actual model
#n_variations shows number of unique images 
#steps_to_variation defines number of interpolated images between them
Interpolated_images , inter_slider = Gan.Initialize_results_interpolation(n_variations = 10, steps_to_variation = 50)



